//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STInterviewTest.ConsoleApp.ClassicAnalyzerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClassicAnalyzerService.IClassicAnalyzerService")]
    public interface IClassicAnalyzerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassicAnalyzerService/Test", ReplyAction="http://tempuri.org/IClassicAnalyzerService/TestResponse")]
        STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse Test(STInterviewTest.ConsoleApp.ClassicAnalyzerService.TestRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassicAnalyzerService/Test", ReplyAction="http://tempuri.org/IClassicAnalyzerService/TestResponse")]
        System.Threading.Tasks.Task<STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse> TestAsync(STInterviewTest.ConsoleApp.ClassicAnalyzerService.TestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassicAnalyzerService/Analyze", ReplyAction="http://tempuri.org/IClassicAnalyzerService/AnalyzeResponse")]
        STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse Analyze(STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClassicAnalyzerService/Analyze", ReplyAction="http://tempuri.org/IClassicAnalyzerService/AnalyzeResponse")]
        System.Threading.Tasks.Task<STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse> AnalyzeAsync(STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class TestRequest {
        
        public TestRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AnalyzerResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AnalyzerResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string ErrorMessage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool IsError;
        
        public AnalyzerResponse() {
        }
        
        public AnalyzerResponse(string Result, string ErrorMessage, bool IsError) {
            this.Result = Result;
            this.ErrorMessage = ErrorMessage;
            this.IsError = IsError;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AnalyzerRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AnalyzerRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileContent;
        
        public AnalyzerRequest() {
        }
        
        public AnalyzerRequest(string FileName, System.IO.Stream FileContent) {
            this.FileName = FileName;
            this.FileContent = FileContent;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClassicAnalyzerServiceChannel : STInterviewTest.ConsoleApp.ClassicAnalyzerService.IClassicAnalyzerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClassicAnalyzerServiceClient : System.ServiceModel.ClientBase<STInterviewTest.ConsoleApp.ClassicAnalyzerService.IClassicAnalyzerService>, STInterviewTest.ConsoleApp.ClassicAnalyzerService.IClassicAnalyzerService {
        
        public ClassicAnalyzerServiceClient() {
        }
        
        public ClassicAnalyzerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClassicAnalyzerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClassicAnalyzerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClassicAnalyzerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse STInterviewTest.ConsoleApp.ClassicAnalyzerService.IClassicAnalyzerService.Test(STInterviewTest.ConsoleApp.ClassicAnalyzerService.TestRequest request) {
            return base.Channel.Test(request);
        }
        
        public string Test(out string ErrorMessage, out bool IsError) {
            STInterviewTest.ConsoleApp.ClassicAnalyzerService.TestRequest inValue = new STInterviewTest.ConsoleApp.ClassicAnalyzerService.TestRequest();
            STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse retVal = ((STInterviewTest.ConsoleApp.ClassicAnalyzerService.IClassicAnalyzerService)(this)).Test(inValue);
            ErrorMessage = retVal.ErrorMessage;
            IsError = retVal.IsError;
            return retVal.Result;
        }
        
        public System.Threading.Tasks.Task<STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse> TestAsync(STInterviewTest.ConsoleApp.ClassicAnalyzerService.TestRequest request) {
            return base.Channel.TestAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse STInterviewTest.ConsoleApp.ClassicAnalyzerService.IClassicAnalyzerService.Analyze(STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerRequest request) {
            return base.Channel.Analyze(request);
        }
        
        public string Analyze(string FileName, System.IO.Stream FileContent, out string ErrorMessage, out bool IsError) {
            STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerRequest inValue = new STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerRequest();
            inValue.FileName = FileName;
            inValue.FileContent = FileContent;
            STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse retVal = ((STInterviewTest.ConsoleApp.ClassicAnalyzerService.IClassicAnalyzerService)(this)).Analyze(inValue);
            ErrorMessage = retVal.ErrorMessage;
            IsError = retVal.IsError;
            return retVal.Result;
        }
        
        public System.Threading.Tasks.Task<STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerResponse> AnalyzeAsync(STInterviewTest.ConsoleApp.ClassicAnalyzerService.AnalyzerRequest request) {
            return base.Channel.AnalyzeAsync(request);
        }
    }
}
